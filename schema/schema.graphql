"""The schema's entry-point for queries."""
type Query {
  """Load a Node entity by id."""
  node(
    """The id of the Node to load."""
    id: ID!

    """
    Optionally set the revision of the entity. Eg current, latest, or an ID.
    """
    revision: ID
  ): NodeUnion

  """Load a Paragraph entity by id."""
  paragraph(
    """The id of the Paragraph to load."""
    id: ID!

    """
    Optionally set the revision of the entity. Eg current, latest, or an ID.
    """
    revision: ID
  ): ParagraphUnion

  """Load a Term entity by id."""
  term(
    """The id of the Term to load."""
    id: ID!

    """
    Optionally set the revision of the entity. Eg current, latest, or an ID.
    """
    revision: ID
  ): TermUnion

  """Load a Menu by name."""
  menu(
    """Internal menu name. Eg MAIN"""
    name: MenuAvailable!
  ): Menu

  """Load a User entity by id."""
  user(
    """The id of the User to load."""
    id: ID!
  ): User

  """
  Get information about the currently authenticated user. NULL if not logged in.
  """
  viewer: User

  """Schema information."""
  info: SchemaInformation!

  """List of all NodeArticle on the platform."""
  nodeArticles(
    """Returns the elements that come after the specified cursor."""
    after: Cursor

    """Returns the elements that come before the specified cursor."""
    before: Cursor

    """Returns up to the first n elements from the list."""
    first: Int

    """Returns up to the last n elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): NodeArticleConnection!

  """List of all NodeHomepage on the platform."""
  nodeHomepages(
    """Returns the elements that come after the specified cursor."""
    after: Cursor

    """Returns the elements that come before the specified cursor."""
    before: Cursor

    """Returns up to the first n elements from the list."""
    first: Int

    """Returns up to the last n elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): NodeHomepageConnection!

  """List of all NodePage on the platform."""
  nodePages(
    """Returns the elements that come after the specified cursor."""
    after: Cursor

    """Returns the elements that come before the specified cursor."""
    before: Cursor

    """Returns up to the first n elements from the list."""
    first: Int

    """Returns up to the last n elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): NodePageConnection!

  """List of all TermTag on the platform."""
  termTags(
    """Returns the elements that come after the specified cursor."""
    after: Cursor

    """Returns the elements that come before the specified cursor."""
    before: Cursor

    """Returns up to the first n elements from the list."""
    first: Int

    """Returns up to the last n elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): TermTagConnection!

  """Load a Route by path."""
  route(
    """Internal path to load. Eg /about"""
    path: String!

    """
    Optionally set the revision of the entity. Eg current, latest, or an ID.
    """
    revision: ID
  ): RouteUnion
}

"""Entity type node."""
union NodeUnion = NodeArticle | NodeHomepage | NodePage

"""
Use <em>articles</em> for time-sensitive content like news, press releases or blog posts.
"""
type NodeArticle implements NodeInterface & EdgeNode {
  """The entity ID."""
  id: ID!

  """The Universally Unique IDentifier (UUID)."""
  uuid: ID!

  """The author of this content."""
  author: User

  """Body"""
  body: TextSummary

  """The time that the node was last edited."""
  changed: DateTime!

  """The date and time that the content was created."""
  created: DateTime!

  """Image"""
  image: Image

  """Language"""
  langcode: Language!

  """URL alias"""
  path: String

  """Promoted to front page"""
  promote: Boolean!

  """Published"""
  status: Boolean!

  """Sticky at top of lists"""
  sticky: Boolean!

  """
  Enter a comma-separated list. For example: Amsterdam, Mexico City, "Cleveland, Ohio"
  """
  tags: [TermUnion!]

  """Title"""
  title: String!
}

"""Entity type node."""
interface NodeInterface {
  """The entity ID."""
  id: ID!

  """The Universally Unique IDentifier (UUID)."""
  uuid: ID!

  """The author of this content."""
  author: User

  """The time that the node was last edited."""
  changed: DateTime!

  """The date and time that the content was created."""
  created: DateTime!

  """Language"""
  langcode: Language!

  """URL alias"""
  path: String

  """Promoted to front page"""
  promote: Boolean!

  """Published"""
  status: Boolean!

  """Sticky at top of lists"""
  sticky: Boolean!

  """Title"""
  title: String!
}

"""Entity type user."""
type User implements UserInterface {
  """The entity ID."""
  id: ID!

  """The Universally Unique IDentifier (UUID)."""
  uuid: ID!

  """The time that the user was last edited."""
  changed: DateTime!

  """The time that the user was created."""
  created: DateTime!

  """The email of this user."""
  mail: Email

  """The name of this user."""
  name: String!

  """The roles the user has."""
  roles: [UserRoles!]

  """Whether the user is active or blocked."""
  status: UserStatus!
}

"""Entity type user."""
interface UserInterface {
  """The entity ID."""
  id: ID!

  """The Universally Unique IDentifier (UUID)."""
  uuid: ID!

  """The time that the user was last edited."""
  changed: DateTime!

  """The time that the user was created."""
  created: DateTime!

  """The email of this user."""
  mail: Email

  """The name of this user."""
  name: String!

  """The roles the user has."""
  roles: [UserRoles!]

  """Whether the user is active or blocked."""
  status: UserStatus!
}

"""A DateTime object."""
type DateTime {
  """
  Type represents date and time as number of milliseconds from start of the UNIX epoch.
  """
  timestamp: Timestamp!

  """A field whose value exists in the standard IANA Time Zone Database."""
  timezone: TimeZone!

  """A string that will have a value of format ±hh:mm"""
  offset: UtcOffset!

  """RFC 3339 compliant time string."""
  time: Time!
}

"""
Type represents date and time as number of milliseconds from start of the UNIX epoch.
"""
scalar Timestamp

"""A field whose value exists in the standard IANA Time Zone Database."""
scalar TimeZone

"""A string that will have a value of format ±hh:mm"""
scalar UtcOffset

"""RFC 3339 compliant time string."""
scalar Time

"""An email address."""
scalar Email

"""User roles."""
scalar UserRoles

"""Whether the user is active or blocked."""
enum UserStatus {
  """An active user is able to login on the platform and view content"""
  ACTIVE

  """
  A blocked user is unable to access the platform, although their content will still be visible until it's deleted.
  """
  BLOCKED
}

"""A language definition provided by the CMS."""
type Language {
  """The language code."""
  id: ID

  """The language name."""
  name: String

  """The language direction."""
  direction: String
}

"""This entity is accessible over an Edge connection."""
interface EdgeNode {
  id: ID!
}

"""A processed text format with summary defined by the CMS."""
type TextSummary {
  """The raw text value."""
  value: String

  """The processed text value."""
  processed: Html

  """The text format used to process the text value."""
  format: String

  """The processed text summary."""
  summary: Html
}

"""
An HTML string

Content of this type is deemed safe by the server for raw output given the
origin and the context of its usage. The HTML can still contain scripts or style
tags where the creating user had permission to input these.
"""
scalar Html

"""A image object to represent an managed file."""
type Image {
  """The URL of the image."""
  url: String!

  """The width of the image."""
  width: Int!

  """The height of the image."""
  height: Int!

  """The alt text of the image."""
  alt: String

  """The title text of the image."""
  title: String

  """The size of the image in bytes."""
  size: Int!

  """The mime type of the image."""
  mime: String

  """Image variations control different sizes and formats for images."""
  variations(styles: [ImageStyleAvailable]): [ImageStyleDerivative!]
}

"""List of image styles available to use."""
enum ImageStyleAvailable {
  """Large (480×480)"""
  LARGE

  """Media Library thumbnail (220×220)"""
  MEDIA_LIBRARY

  """Medium (220×220)"""
  MEDIUM

  """Thumbnail (100×100)"""
  THUMBNAIL

  """Wide (1090)"""
  WIDE
}

"""ImageStyle derivatives for an Image."""
type ImageStyleDerivative {
  name: String!
  url: String!
  width: Int!
  height: Int!
}

"""Entity type taxonomy_term."""
union TermUnion = TermTag

"""Use tags to group articles on similar topics into categories."""
type TermTag implements TermInterface & EdgeNode {
  """The entity ID."""
  id: ID!

  """The Universally Unique IDentifier (UUID)."""
  uuid: ID!

  """The time that the term was last edited."""
  changed: DateTime!

  """Description"""
  description: Text!

  """The term language code."""
  langcode: Language!

  """Name"""
  name: String!

  """The parents of this term."""
  parent: TermUnion

  """URL alias"""
  path: String

  """Published"""
  status: Boolean!

  """The weight of this term in relation to other terms."""
  weight: Int!
}

"""Entity type taxonomy_term."""
interface TermInterface {
  """The entity ID."""
  id: ID!

  """The Universally Unique IDentifier (UUID)."""
  uuid: ID!

  """The time that the term was last edited."""
  changed: DateTime!

  """Description"""
  description: Text!

  """The term language code."""
  langcode: Language!

  """Name"""
  name: String!

  """The parents of this term."""
  parent: TermUnion

  """URL alias"""
  path: String

  """Published"""
  status: Boolean!

  """The weight of this term in relation to other terms."""
  weight: Int!
}

"""A processed text format defined by the CMS."""
type Text {
  """The raw text value."""
  value: String

  """The processed text value."""
  processed: Html

  """The text format used to process the text value."""
  format: String
}

"""
A structured homepage content type with hero section, features, and call-to-action areas.
"""
type NodeHomepage implements NodeInterface & EdgeNode {
  """The entity ID."""
  id: ID!

  """The Universally Unique IDentifier (UUID)."""
  uuid: ID!

  """The author of this content."""
  author: User

  """The time that the node was last edited."""
  changed: DateTime!

  """The date and time that the content was created."""
  created: DateTime!

  """Description for the call-to-action section"""
  ctaDescription: Text

  """Primary button in the call-to-action section"""
  ctaPrimary: Link

  """Secondary button in the call-to-action section"""
  ctaSecondary: Link

  """Title for the call-to-action section"""
  ctaTitle: String

  """Individual feature items with structured content"""
  featuresItems: [ParagraphUnion!]

  """Subtitle for the features section"""
  featuresSubtitle: Text

  """Title for the features section"""
  featuresTitle: String

  """The description text displayed in the hero section"""
  heroDescription: Text

  """The subtitle displayed in the hero section"""
  heroSubtitle: String

  """The main title displayed in the hero section"""
  heroTitle: String

  """Language"""
  langcode: Language!

  """URL alias"""
  path: String

  """Primary call-to-action button"""
  primaryCta: Link

  """Promoted to front page"""
  promote: Boolean!

  """Secondary call-to-action button"""
  secondaryCta: Link

  """Published"""
  status: Boolean!

  """Sticky at top of lists"""
  sticky: Boolean!

  """Title"""
  title: String!
}

"""A link."""
type Link {
  """The title of the link."""
  title: String

  """The URL of the link."""
  url: String

  """Whether the link is internal to this website."""
  internal: Boolean!
}

"""Entity type paragraph."""
union ParagraphUnion = ParagraphFeatureItem

"""A feature item with title and description for marketing pages"""
type ParagraphFeatureItem implements ParagraphInterface {
  """The entity ID."""
  id: ID!

  """The Universally Unique IDentifier (UUID)."""
  uuid: ID!

  """The time that the Paragraph was created."""
  created: DateTime!

  """The description of this feature"""
  featureDescription: Text!

  """
  Enter the name of a Lucide icon (e.g., "database", "zap", "shield"). Browse
  available icons at <a href="https://lucide.dev/icons/"
  target="_blank">https://lucide.dev/icons/</a>
  """
  featureIcon: String

  """The title of this feature"""
  featureTitle: String!

  """The paragraphs entity language code."""
  langcode: Language!

  """Published"""
  status: Boolean!
}

"""Entity type paragraph."""
interface ParagraphInterface {
  """The entity ID."""
  id: ID!

  """The Universally Unique IDentifier (UUID)."""
  uuid: ID!

  """The time that the Paragraph was created."""
  created: DateTime!

  """The paragraphs entity language code."""
  langcode: Language!

  """Published"""
  status: Boolean!
}

"""
Use <em>basic pages</em> for your static content, such as an 'About us' page.
"""
type NodePage implements NodeInterface & EdgeNode {
  """The entity ID."""
  id: ID!

  """The Universally Unique IDentifier (UUID)."""
  uuid: ID!

  """The author of this content."""
  author: User

  """Body"""
  body: TextSummary

  """The time that the node was last edited."""
  changed: DateTime!

  """The date and time that the content was created."""
  created: DateTime!

  """Language"""
  langcode: Language!

  """URL alias"""
  path: String

  """Promoted to front page"""
  promote: Boolean!

  """Published"""
  status: Boolean!

  """Sticky at top of lists"""
  sticky: Boolean!

  """Title"""
  title: String!
}

"""List of menus available to load."""
enum MenuAvailable {
  """Main navigation"""
  MAIN
}

"""Entity type menu."""
type Menu implements MenuInterface {
  """The entity ID."""
  id: ID!

  """The Universally Unique IDentifier (UUID)."""
  uuid: ID!

  """The menu items."""
  items: [MenuItem!]!

  """The menu name."""
  name: String!
}

"""Entity type menu."""
interface MenuInterface {
  """The entity ID."""
  id: ID!

  """The Universally Unique IDentifier (UUID)."""
  uuid: ID!

  """The menu items."""
  items: [MenuItem!]!

  """The menu name."""
  name: String!
}

"""A menu item defined in the CMS."""
type MenuItem {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The title of the menu item."""
  title: String!

  """The description of the menu item."""
  description: String

  """The URL of the menu item."""
  url: String

  """The language of the menu item."""
  langcode: Language!

  """Whether this menu item links to an internal route."""
  internal: Boolean!

  """Whether this menu item is intended to be expanded."""
  expanded: Boolean!

  """Attributes of this menu item."""
  attributes: MenuItemAttributes!

  """Child menu items of this menu item."""
  children: [MenuItem!]!

  """
  The route this menu item uses. Route loading can be disabled per menu type.
  """
  route: RouteUnion
}

"""Menu item options set within the CMS."""
type MenuItemAttributes {
  """Menu item attribute class."""
  class: String
}

"""Route types that can exist in the system."""
union RouteUnion = RouteInternal | RouteExternal

"""Route within this website."""
type RouteInternal implements Route {
  """URL of this route."""
  url: String!

  """Whether this route is internal or external."""
  internal: Boolean!

  """Breadcrumb links for this route."""
  breadcrumbs: [Link!]

  """Content assigned to this route."""
  entity: RouteEntityUnion
}

"""Routes represent incoming requests that resolve to content."""
interface Route {
  """URL of this route."""
  url: String!

  """Whether this route is internal or external."""
  internal: Boolean!
}

"""A list of possible entities that can be returned by URL."""
union RouteEntityUnion = NodeArticle | NodeHomepage | NodePage

"""Route outside of this website."""
type RouteExternal implements Route {
  """URL of this route."""
  url: String!

  """Whether this route is internal or external."""
  internal: Boolean!
}

"""Schema information provided by the system."""
type SchemaInformation {
  """The schema description."""
  description: String

  """The internal path to the front page."""
  home: String

  """The site name."""
  name: String

  """The site slogan."""
  slogan: String

  """The schema version."""
  version: String
}

"""A cursor for use in pagination."""
scalar Cursor

"""Choose how your sorts will occur and on which field."""
enum ConnectionSortKeys {
  """Sort by creation date"""
  CREATED_AT

  """Sort by updated date"""
  UPDATED_AT

  """Sort by entity title."""
  TITLE

  """Sort by sticky status."""
  STICKY

  """Sort by promoted status."""
  PROMOTED

  """Sort by term weight."""
  WEIGHT
}

"""A paginated set of results for NodeArticle."""
type NodeArticleConnection implements Connection {
  edges: [NodeArticleEdge!]!
  nodes: [NodeArticle!]!
  pageInfo: ConnectionPageInfo!
}

"""A paginated set of results."""
interface Connection {
  """The edges of this connection."""
  edges: [Edge!]!

  """The nodes of the edges of this connection."""
  nodes: [EdgeNode!]!

  """Information to aid in pagination."""
  pageInfo: ConnectionPageInfo!
}

"""
An edge in a connection.
Provides the cursor to fetch data based on the position of the associated
node. Specific edge implementations may provide more information about the
relationship they represent.
"""
interface Edge {
  cursor: Cursor!
  node: EdgeNode!
}

"""Information about the page in a connection."""
type ConnectionPageInfo {
  """Whether there are more pages in this connection."""
  hasNextPage: Boolean!

  """Whether there are previous pages in this connection."""
  hasPreviousPage: Boolean!

  """The cursor for the first element in this page."""
  startCursor: Cursor

  """The cursor for the last element in this page."""
  endCursor: Cursor
}

"""Edge for NodeArticle."""
type NodeArticleEdge implements Edge {
  cursor: Cursor!
  node: NodeArticle!
}

"""A paginated set of results for NodeHomepage."""
type NodeHomepageConnection implements Connection {
  edges: [NodeHomepageEdge!]!
  nodes: [NodeHomepage!]!
  pageInfo: ConnectionPageInfo!
}

"""Edge for NodeHomepage."""
type NodeHomepageEdge implements Edge {
  cursor: Cursor!
  node: NodeHomepage!
}

"""A paginated set of results for NodePage."""
type NodePageConnection implements Connection {
  edges: [NodePageEdge!]!
  nodes: [NodePage!]!
  pageInfo: ConnectionPageInfo!
}

"""Edge for NodePage."""
type NodePageEdge implements Edge {
  cursor: Cursor!
  node: NodePage!
}

"""A paginated set of results for TermTag."""
type TermTagConnection implements Connection {
  edges: [TermTagEdge!]!
  nodes: [TermTag!]!
  pageInfo: ConnectionPageInfo!
}

"""Edge for TermTag."""
type TermTagEdge implements Edge {
  cursor: Cursor!
  node: TermTag!
}

"""The schema's entry-point for mutations."""
type Mutation {
  """Placeholder for mutation extension."""
  _: Boolean!
}

"""The schema's entry-point for subscriptions."""
type Subscription {
  """Placeholder for subscription extension."""
  _: Boolean!
}

"""Input for filter exposed with operator "between"."""
input BetweenFloatInput {
  """The minimum value of the range."""
  min: Float

  """The maximum value of the range."""
  max: Float
}

"""Input for filter exposed with operator "between"."""
input BetweenStringInput {
  """The minimum value of the range."""
  min: String

  """The maximum value of the range."""
  max: String
}

"""A Date range has a start and an end."""
type DateRange {
  """The start of the date range."""
  start: DateTime

  """The end of the date range."""
  end: DateTime
}

"""A file object to represent an managed file."""
type File {
  """The name of the file."""
  name: String

  """The URL of the file."""
  url: String!

  """The size of the file in bytes."""
  size: Int!

  """The mime type of the file."""
  mime: String

  """The description of the file."""
  description: String
}

"""Entity type image_style."""
type ImageStyle implements ImageStyleInterface {
  """The entity ID."""
  id: ID!

  """The Universally Unique IDentifier (UUID)."""
  uuid: ID!
}

"""Entity type image_style."""
interface ImageStyleInterface {
  """The entity ID."""
  id: ID!

  """The Universally Unique IDentifier (UUID)."""
  uuid: ID!
}

"""Entity type image_style."""
union ImageStyleUnion = ImageStyle

"""Generic input for key-value pairs."""
input KeyValueInput {
  key: String!
  value: String
}

"""Entity type menu."""
union MenuUnion = Menu

"""A field whose value conforms to the standard E.164"""
scalar PhoneNumber

"""Sort direction."""
enum SortDirection {
  """Ascending"""
  ASC

  """Descending"""
  DESC
}

"""
Unsupported entity or field type in the schema.
This entity may not have been enabled in the schema yet and is being referenced via entity reference.
"""
type UnsupportedType {
  """Unsupported type, always TRUE."""
  unsupported: Boolean
}

"""Untyped structured data. Eg JSON, configuration, settings, attributes."""
scalar UntypedStructuredData

"""Entity type user."""
union UserUnion = User

"""Views represent collections of curated data from the CMS."""
interface View {
  """The ID of the view."""
  id: ID!

  """The machine name of the view."""
  view: String!

  """The machine name of the display."""
  display: String!

  """The language code of the view."""
  langcode: String

  """The human friendly label of the view."""
  label: String

  """The description of the view."""
  description: String

  """Information about the page in the view."""
  pageInfo: ViewPageInfo!
}

"""Information about the page in a view."""
type ViewPageInfo {
  """Any result offset being used."""
  offset: Int!

  """The current page being returned."""
  page: Int!

  """How many results per page."""
  pageSize: Int!

  """How many results total."""
  total: Int!
}

"""An exposed filter option for the view."""
type ViewFilter {
  """The filter identifier."""
  id: ID!

  """The filter plugin type."""
  plugin: String!

  """The filter element type."""
  type: String!

  """The filter operator."""
  operator: String!

  """The filter element label."""
  label: String

  """The filter element description."""
  description: String

  """Whether the filter is required."""
  required: Boolean!

  """Whether the filter allows multiple values."""
  multiple: Boolean!

  """The value for the filter. Could be an array for multiple values."""
  value: UntypedStructuredData

  """The filter element options if any are defined."""
  options: UntypedStructuredData

  """The filter element attributes."""
  attributes: UntypedStructuredData!
}

"""A reference to an embedded view"""
type ViewReference {
  """The machine name of the view."""
  view: String!

  """The machine name of the display."""
  display: String!

  """The contextual filter values used."""
  contextualFilter: [String!]

  """How many results per page."""
  pageSize: Int

  """
  The name of the query used to fetch the data, if the view is a GraphQL display.
  """
  query: String
}

"""All available view result types."""
union ViewResultUnion = UnsupportedType